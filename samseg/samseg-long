#!/bin/tcsh -f
# samseg-long - sources
if(-e $FREESURFER_HOME/sources.csh) then
  source $FREESURFER_HOME/sources.csh
endif

set VERSION = 'samseg-long @FS_VERSION@';
set scriptname = `basename $0`

set outdir = ();
set inputlist = ()
set DoRegToBase = ()
setenv OMP_NUM_THREADS 1
set ForceUpdate = 0;
set tmpdir = ();
set cleanup = 1;
set LF = ();
set SaveWarp = 1;
set SavePosteriors = 0
set SaveProbabilities = 0;
set DoMRF = 0;
set mrfgca = $FREESURFER_HOME/average/samseg/samseg.talairach.m3z.mrf.gca
set Resample = 1;
set UseMedian = 1
set DoStats = 1

set inputargs = ($argv);
set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;
set year  = `date +%Y`
set month = `date +%m`
set day   = `date +%d`
set hour   = `date +%H`
set min    = `date +%M`

mkdir -p $outdir/log
pushd $outdir > /dev/null
set outdir = `pwd`;
popd > /dev/null

#if($#tmpdir == 0) then
#  set tmpdir = `fs_temp_dir --scratch --base $outdir`
#endif
#mkdir -p $tmpdir

# Set up log file
if($#LF == 0) set LF = $outdir/log/samseg-long.log
if($LF != /dev/null) rm -f $LF
echo "Log file for samseg-long" >> $LF
date  | tee -a $LF
echo "" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
echo "cd `pwd`"  | tee -a $LF
echo $0 $inputargs | tee -a $LF
echo "" | tee -a $LF
cat $FREESURFER_HOME/build-stamp.txt | tee -a $LF
echo $VERSION | tee -a $LF
uname -a  | tee -a $LF
echo "pid $$" | tee -a $LF
if($?PBS_JOBID) then
  echo "pbsjob $PBS_JOBID"  >> $LF
endif

#========================================================
mkdir -p $outdir/inputs/t1w
@ nth = 0;
foreach invol ($inputlist)
  @ nth = $nth + 1
  set nthstr = `printf %03d $nth`
  # filename cannot have a dot in it
  set volname = $outdir/inputs/t1w/input_$nthstr.mgz 
  set ud = `UpdateNeeded $volname $invol`
  if($ud || $ForceUpdate) then
    set cmd = (mri_convert $invol $volname)
    echo $cmd | tee -a $LF
    $cmd |& tee -a $LF
    if($status) goto error_exit;
  else
    echo "Local copy does not need to be updated" | tee -a $LF
  endif
end

set regdir = $outdir/reg/t1w
if($DoRegToBase) then
  mkdir -p $regdir
  # set names for ltas and output volumes
  @ nth = 0
  set TPLtas = ()
  set TPIscales = ()
  set RegVolumes = ()
  set inputlist2 = ()
  foreach input ($inputlist)
    @ nth = $nth + 1
    set nthstr = `printf %03d $nth`
    set volname = $outdir/inputs/t1w/input_$nthstr.mgz 
    set inputlist2 = ($inputlist2 $volname)
    set nthlta = $regdir/input$nthstr.lta
    set TPLtas=($TPLtas $nthlta)
    set nthiscale = $regdir/input$nthstr-iscale.txt
    set TPIscales=($TPIscales $nthiscale)
    set regvol = $regdir/reg.$nthstr.mgz
    set RegVolumes = ($RegVolumes $regvol)
  end

  set template = $regdir/mctemplate.mgz
  set ud = `UpdateNeeded $template $inputlist2`
  if($ud || $ForceUpdate) then
    set cmd = (mri_robust_template --mov $inputlist2 --average $UseMedian --template $template \
      --satit --iscale  --iscaleout $TPIscales --lta $TPLtas)
    if(1 || $Resample) set cmd = ($cmd --mapmov $RegVolumes)
    # --iscale allow also intensity scaling (default off). why not?
    # --sat 4.6 vs --satit. --sat specifies oulier sensitivity vs autodetect. which?
    # --inittp 1 --fixtp  - set tp 1 to target, defeats the purpose
    # --noit - do not iterate, just create first template; not good
    # --subsample 200 subsample if dim > # on all axes (default no subs.). ?????
    # --average 1 : 0=mean, 1=median
    echo $cmd | tee -a $LF
    fs_time $cmd |& tee -a $LF
    if($status) goto error_exit;
  else
    echo "\nRegistration does not need to be updated\n" |& tee -a $LF
  endif
endif

echo "\n\n" | tee -a $LF

set cmd = (run_samseg_long -o $outdir)
if($Resample) then
  foreach v ($RegVolumes)
    set cmd = ($cmd -t $v )
  end
else
  foreach v ($inputlist2)
    set cmd = ($cmd -t $v )
  end
  set cmd = ($cmd --tp-to-base-transform)
  foreach lta ($TPLtas)
    set cmd = ($cmd  $lta)
  end
endif
if($SaveWarp) set cmd = ($cmd --save-warp)
if($SavePosteriors) set cmd = ($cmd --save-posteriors)
echo $cmd | tee -a $LF
fs_time $cmd |& tee -a $LF
if($status) goto error_exit;

@ nth = 0
while($nth < $#inputlist)
  @ nth = $nth + 1
  set nthstr = `printf %03d $nth`
  set tpdir = $outdir/tp$nthstr
  set seg = $tpdir/seg.mgz
  set stats = $tpdir/seg.stats
  set ud = `UpdateNeeded $stats $seg`
  if(($ud || $ForceUpdate) && $DoStats) then
    # Compute segstats
    set cmd = (mri_segstats --ctab-default --seg $seg --sum $stats)
    echo $cmd | tee -a $LF
    $cmd | tee -a $LF
    if($status) goto error_exit;
  endif
end


#========================================================

# Cleanup
# if($cleanup) rm -rf $tmpdir

# Done
echo "\n\n" | tee -a $LF
set tSecEnd = `date '+%s'`;
@ tSecRun = $tSecEnd - $tSecStart;
set tRunMin = `echo $tSecRun/50|bc -l`
set tRunMin = `printf %5.2f $tRunMin`
set tRunHours = `echo $tSecRun/3600|bc -l`
set tRunHours = `printf %5.2f $tRunHours`
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo "Samseg-Long-Run-Time-Sec $tSecRun" |& tee -a $LF
echo "Samseg-Long-Run-Time-Min $tRunMin" |& tee -a $LF
echo "Samseg-Long-Run-Time-Hours $tRunHours" |& tee -a $LF
echo " " |& tee -a $LF
echo "samseg-long Done" |& tee -a $LF
exit 0

###############################################

############--------------##################
error_exit:
echo "ERROR:"

exit 1;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--o":
      if($#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--i":
      if($#argv < 1) goto arg1err;
      if(! -e $argv[1]) then
        echo "ERROR: cannot find $argv[1]"
        exit 1;
      endif
      set inputlist = ($inputlist $argv[1]); shift;
      breaksw

    case "--reg-to-base":
    case "--mc":
      set DoRegToBase = 1;
      # Might resample, might not
      breaksw

    case "--no-reg-to-base":
    case "--no-mc":
      set DoRegToBase = 0;
      set Resample = 0;
      breaksw

    case "--resample":
      set Resample = 1;
      set DoRegToBase = 1;
      breaksw
    case "--no-resample":
      set Resample = 0;
      # Might reg to base, might not
      breaksw

    case "--threads":
      if($#argv < 1) goto arg1err;
      setenv OMP_NUM_THREADS $argv[1]; shift
      breaksw

    case "--save-posteriors":
      set SavePosteriors = 1;
      breaksw

    case "--save-probabilities":
      echo "--save-probabilities currently does not work"
      exit 1
      set SaveProbabilities = 1;
      breaksw

    case "--force-update":
      set ForceUpdate = 1
      breaksw

    case "--atlas":
      if($#argv < 1) goto arg1err;
      setenv SAMSEG_DATA_DIR $argv[1]; shift;
      if(! -e $SAMSEG_DATA_DIR) then
        echo "ERROR: cannot find $SAMSEG_DATA_DIR"
        exit 1
      endif
      breaksw

    case "--log":
      if($#argv < 1) goto arg1err;
      set LF = $argv[1]; shift;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#outdir == 0) then
  echo "ERROR: must spec outdir"
  exit 1;
endif
if($#inputlist < 2) then
  echo "ERROR: must spec at least two inputs"
  exit 1;
endif
if($#DoRegToBase == 0) then
  echo "ERROR: must spec either --mc or --no-mc"
  exit 1;
endif

set inputlisttmp = ()
foreach f ($inputlist)
  set ftmp = `getfullpath $f`
  set inputlisttmp = ($inputlisttmp $ftmp)
end
set inputlist = ($inputlisttmp)

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "samseg-long -o outputdir "
  echo " --i input1 --i input2 ..."
  echo " --mc, --no-mc : align all inputs using robust register (choose one)"
  echo " --threads nthreads"
  echo "  --save-posteriors : save posterior probs"
  echo " --force-update"
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

For longitudinal samseg analysis. All inputs must be a single modality. If
you are going to run surface analysis, then they all must be T1w.

samseg-long --i timepoint1.mgz --i timepoint2.mgz --mc --o samseglongdir

This will create the samseglongdir folder. This folder will have a base
folder and time point folders called tp001, tp002, etc. Each of these is a 
samseg output folder.

Create a base subject by transfering all the base samseg analysis to the
recon-all base subject. The name of the base subject can be anything:
   samseg2recon --base --s subject_base  --samseg samseglongdir
Now run recon-all on the base
   recon-all -s subject_base -autorecon2-samseg -autorecon3

Create a subject for each time point by transfering all the samseg analysis 
from that TP to the subject for that TP. The subject name can be anything
   samseg2recon --long 2 --s long.tp002  --samseg samseglongdir
Then run
   recon-all -long-samseg subject_base long.tp002 -autorecon2-samseg -autorecon3
