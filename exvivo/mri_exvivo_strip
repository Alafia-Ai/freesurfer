#!/usr/bin/env python

import os
import copy
import numpy as np
import freesurfer as fs


# parse commandline args
parser = fs.utils.ArgumentParser()
parser.add_argument('-i', '--invol', required=True, help='input MRI volume')
parser.add_argument('-o', '--outvol', required=True, help='output MRI volume')
parser.add_argument('--hemi', required=True, help='hemi to process')
parser.add_argument('--pred', help='write prediction volume')
parser.add_argument('--norm', help='write normalized volume')
parser.add_argument('--fv', help='bring up freeview to show results', action='store_true')
parser.add_argument('--uthresh', default=5000, type=float, help='specify threshold to erase above')
parser.add_argument('--border', default=4, type=int, help='number of border voxels to set threshold at')
parser.add_argument('--multichannel', action='store_true', help='specify that data has multiple channels')
parser.add_argument('--model', help='use alternative model file')
parser.add_argument('--wts', help='wt filename')
parser.add_argument('--gpu', help='GPU number - if not supplied, CPU is used')
args = parser.parse_args()

# delay slow TF import after parsing cmd line
import tensorflow as tf
import neurite as ne

# check hemi
if args.hemi not in ('lh', 'rh'):
    fs.fatal(f'Hemi specification must be either `lh` or `rh`. User provided `{args.hemi}`.')

# read input volume and normalize input intensities
mri_in = fs.Volume.read(args.invol)
if args.uthresh:
    mri_in.data[mri_in.data>args.uthresh] = 0

in_data = (mri_in.data - mri_in.data.min()) 
in_data = np.clip(in_data / np.percentile(in_data, 99), 0,1)
mri_in.data = in_data
vol_shape = [192,160,192]
vol_shape = [192,160,160]
vol_shape = [256] * 3

if 0:
    mri_conf = mri_in.reslice((1,1,1))
    left_pad = (np.array(vol_shape)-np.array(mri_conf.shape))//2
    right_pad = (np.array(vol_shape)-(np.array(mri_conf.shape)+left_pad))
    padding = ((left_pad[0], right_pad[0]), (left_pad[1], right_pad[1]), (left_pad[2], right_pad[2]))
    conf_data = np.pad(mri_conf.data, padding)
    #mri_conf = mri_conf1.conform_to_shape(vol_shape)
else:
    mri_conf = mri_in.conform().fit_to_shape(vol_shape)
    conf_data = mri_conf.data

if args.norm:
    mri_in.write('norm.mgz')

# device handling, model reading and prediction
if args.gpu:
    device, ngpus = ne.tf.utils.setup_device(args.gpu)
else:
    device = '/cpu:0'

# model weights
if args.model is not None:
    modelfile = args.model
    print('Using custom model weights')
else:
    fshome = fs.fshome()
    if fshome is None:
        fs.fatal('FREESURFER_HOME env variable must be set! Make sure FreeSurfer is properly sourced.')
    modelfile = os.path.join(fshome, 'models', f'exvivo.strip.{args.hemi}.h5')

print(f'using device {device}')
with tf.device(device):
    print(f'loading model from {modelfile}')
    model = tf.keras.models.load_model(modelfile, compile=False)
    if args.wts:
        print(f'loading weights from {args.wts}')
        model.load_weights(args.wts)

    pred = model.predict(conf_data[np.newaxis,...,np.newaxis]).squeeze()

if 0:
    unconf_data = pred[left_pad[0]:-right_pad[0], left_pad[1]:-right_pad[1], left_pad[2]:-right_pad[2]]
    mri_unconf1 = copy.copy(mri_conf)
    mri_unconf1.data = unconf_data
    mri_unconf = mri_unconf1.reslice(mri_in.voxsize).conform_to_shape(mri_in.shape)
else:
    mri_mask = copy.copy(mri_conf)
    mri_mask.data = pred

# create and write output volume
mri_out = mri_mask.resample_like(mri_in)

if args.pred:
    mri_mask.write(args.pred)

mri_interior = mri_out.copy()
mri_interior.data = np.where(mri_out.data <= args.border, 1, 0)

# find largest connected component and use it as the mask
from skimage import measure
cc = measure.label(mri_interior.data, background=0)
cc_areas = [(cc == label).sum() for label in range(1,cc.max()+1)]
max_label = np.argmax(np.array(cc_areas))+1
mri_out.data = mri_in.data * (cc == max_label)

mri_out.write(args.outvol)

if args.fv:
    fv = fs.Freeview()
    fv.vol(mri_in, name='input:linked=1')
    fv.vol(mri_conf, name='conf', opts=':linked=1:visible=0:locked=1')
    fv.vol(mri_interior, name='interior', colormap='lut', opts=':visible=0:linked=1:locked=1')
    fv.vol(mri_out, name='out', opts=':heatscale=1,3:visible=1:linked=1')
    fv.show()
