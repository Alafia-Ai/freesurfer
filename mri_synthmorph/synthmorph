#!/usr/bin/env python3

# This wrapper script aims to simplify the use of SynthMorph containers by
# automatically pulling images from Docker Hub and mounting the host directory
# SUBJECTS_DIR to /mnt inside the container. You can use the script just like
# `mri_synthmorph` in FreeSurfer, except that all input and output files must
# be in SUBJECTS_DIR. If you use Docker or Podman, any path passed as an
# argument must begin with /mnt. For example, `export SUBJECTS_DIR=~/data` and
# pass /mnt/bert/out.mgz for a file at ~/data/bert/out.mgz. The environment
# variable SUBJECT_DIR defaults to the current working directory.

# Update the SynthMorph version to use a different image from Docker Hub.
version = 1

# We will attempt to use the first container system from the below list found
# in PATH. You may wish to update their order if you have several installed.
tools = ['docker', 'apptainer', 'singularity', 'podman']

# Local image location for Apptainer/Singularity. Use an absolute path to avoid
# pulling new images if you change the folder. Ignored for Docker and Podman.
sif_file = f'synthmorph_{version}.sif'


import os
import sys
import shutil
import subprocess


# Report version.
hub = 'https://hub.docker.com/u/freesurfer'
print(f'Running SynthMorph version {version} from {hub}', file=sys.stderr)


# Find a container system.
for tool in tools:
    path = shutil.which(tool)
    if path:
        print(f'Using {path} to manage containers')
        break

if not path:
    print(f'Cannot find container tool in PATH {tools}', file=sys.stderr)
    exit(1)


# Prepare bind path an URL. Mount SUBJECTS_DIR as /mnt inside the container.
# Docker and Podman let us create bind mounts only for absolute paths.
host = os.environ.get('SUBJECTS_DIR', os.getcwd())
host = os.path.realpath(host)
print(f'Will bind /mnt in image to SUBJECTS_DIR="{host}"')

image = f'freesurfer/synthmorph:{version}'
if tool != 'docker':
    image = f'docker://{image}'


# Run Docker containers with the UID and GID of the host user. This user will
# own bind mounts inside the container, preventing output files owned by root.
if tool == 'docker':
    uid = os.getuid()
    gid = os.getgid()
    arg = ('run', '--rm', '-u', f'{uid}:{gid}', '-v', f'{host}:/mnt', image)


# Root inside a rootless Podman container maps to the non-root host user, which
# is what we want. If we set UID and GID inside the container to the non-root
# host user as we do for Docker, then these would get remapped according to
# /etc/subuid outside, causing problems with read and write permissions.
if tool == 'podman':
    arg = ('run', '--rm', '-v', f'{host}:/mnt', image)


# For Apptainer/Singularity, the user inside and outside the container is the
# same. We can conveniently mount relative paths inside, so we also mirror
# SUBJECTS_DIR in addition to binding it to /mnt for convenience.
if tool in ('apptainer', 'singularity'):
    arg = ('run', '--nv', '-e', '-B', f'{host}:/mnt', '-B', host, sif_file)

    if not os.path.isfile(sif_file):
        print(f'Cannot find image {sif_file}, pulling it', file=sys.stderr)
        proc = subprocess.run((tool, 'pull', sif_file, image))
        if proc.returncode:
            exit(proc.returncode)


# Summarize and launch container.
print('Command:', ' '.join((tool, *arg)))
print('SynthMorph arguments:', *sys.argv[1:])
proc = subprocess.run((tool, *arg, *sys.argv[1:]))
exit(proc.returncode)
